
-- ========================================================
-- Exploratory Data Analysis – Database Exploration
-- ========================================================

-- Explore all objects in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES
ORDER BY TABLE_SCHEMA


-- Explore all coulumns in the database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'


-- Exploratory Data Analysis – Dimensions Exploration

-- Explore all countries customers come from
SELECT DISTINCT country from gold.dim_customers

-- Explore all categoties 
SELECT DISTINCT category, subcategory, product_name from gold.dim_products
ORDER BY 1,2,3

-- Exploratory Data Analysis – Date Exploration

-- Find the date of the first and last order
SELECT 
	MIN(order_date) AS first_order_date,
	MAX(order_date) AS last_order_date
FROM gold.fact_sales

-- Find how many years of sales between first & last order
-- a. In years
-- b. In months
SELECT 
	MIN(order_date) AS first_order_date,
	MAX(order_date) AS last_order_date,
	DATEDIFF(year, MIN(order_date), MAX(order_date)) AS order_range_years,
	DATEDIFF(month, MIN(order_date), MAX(order_date)) AS order_range_momth
FROM gold.fact_sales

-- Find youngest & oldest customer
SELECT 
	MAX(birth_date) AS youngest_customer,
	MIN(birth_date) AS oldest_customer
FROM gold.dim_customers

-- Find youngest & oldest customer current age
SELECT 
	MAX(birth_date) AS youngest_customer,
	MIN(birth_date) AS oldest_customer,
	DATEDIFF(year, MAX(birth_date), GETDATE()) AS youngest_customer_age,
	DATEDIFF(year, MIN(birth_date), GETDATE()) AS oldest_customer_age
FROM gold.dim_customers


-- Exploratory Data Analysis – Measures Exploration

-- Find the total sales
SELECT SUM(sales_amount) AS total_sales
FROM gold.fact_sales

-- Find how many items were sold
SELECT SUM(quantity) AS total_quantity
FROM gold.fact_sales

-- Find the average selling price
SELECT AVG(price) AS average_price
FROM gold.fact_sales

-- Find the total number of orders
SELECT COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales

-- Find the total number of products
SELECT COUNT(product_key) AS total_products
FROM gold.dim_products

-- Find the total number of customers
SELECT COUNT(customer_key) as total_customers
FROM gold.dim_customers

-- Find the total number of customers who has placed orders 
SELECT COUNT(DISTINCT customer_key) as total_customers
FROM gold.fact_sales

-- Generate a report to show all key metrics of the business
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Products', COUNT(product_key) FROM gold.dim_products
UNION ALL
SELECT 'Total Customers', COUNT(customer_key) FROM gold.dim_customers
UNION ALL
SELECT 'Total Customers with orders', COUNT(DISTINCT customer_key) FROM gold.fact_sales


-- Exploratory Data Analysis – Magnitude Analysis

-- Find total customers by country
SELECT 
	country,
	COUNT(customer_key) AS total_customers 
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC


-- Find total customers by gender
SELECT 
	gender,
	COUNT(customer_key) AS total_customers 
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC


-- Find total products by category
SELECT
	category,
	COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC


-- What is the average cost in each category?
SELECT
	category,
	AVG(cost) AS average_cost
FROM gold.dim_products
GROUP BY category
ORDER BY average_cost DESC


-- What is the total revenue generated for each category?
SELECT
	p.category,
	SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_products AS p
	ON s.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC


-- Find total revenue generated by each customer
SELECT 
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_customers AS c
	ON S.customer_key = C.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC


-- What is the distribution of sold items acorss countires?
SELECT 
	c.country,
	SUM(s.quantity) AS total_sold_items
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_customers AS c
	ON s.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC


-- Exploratory Data Analysis – Ranking Analysis

-- Which 5 products generate the highest revenue?
SELECT TOP 5
	p.product_name,
	SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_products AS p
	ON s.product_key = P.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC


-- Which 5 products generate the highest revenue? (using WINDOW function)
SELECT * FROM (
SELECT 
	p.product_name,
	SUM(s.sales_amount) AS total_revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(s.sales_amount) DESC) AS rank_products
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_products AS p
	ON s.product_key = P.product_key
GROUP BY p.product_name
)t
WHERE rank_products <= 5


-- What are the 5 worst-performing products in temrms of sales?
SELECT TOP 5
	p.product_name,
	SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_products AS p
	ON s.product_key = P.product_key
GROUP BY p.product_name
ORDER BY total_revenue ASC


-- Top 10 customers who have generated the highest revenue
SELECT TOP 10
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_customers AS c
	ON s.customer_key = c.customer_key
GROUP BY
c.customer_key,
c.first_name, 
c.last_name
ORDER BY total_revenue DESC


-- 3 customers with lowest no of orders placed
SELECT TOP 3
	c.customer_key,
	c.first_name,
	c.last_name,
	COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_customers AS c
	ON s.customer_key = c.customer_key
GROUP BY
c.customer_key,
c.first_name, 
c.last_name
ORDER BY total_orders ASC